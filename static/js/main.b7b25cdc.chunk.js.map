{"version":3,"sources":["components/TrafficLightContext/index.js","components/TrafficLight/index.js","components/PedestrianButton/index.js","components/EmergencyButton/index.js","App.js","reportWebVitals.js","index.js"],"names":["initialState","currentLight","pedestrianRequested","emergencyOverride","timer","CHANGE_LIGHT","REQUEST_CROSSING","EMERGENCY_OVERRIDE","RESET_TIMER","UPDATE_TIMER","reducer","state","action","type","payload","TrafficLightContext","createContext","TrafficLightProvider","_ref","children","dispatch","useReducer","useEffect","timerId","setInterval","changeLight","clearTimeout","React","createElement","Provider","value","TrafficLight","useContext","className","PedestrianButton","onClick","handleClick","EmergencyButton","handleEmergency","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.b7b25cdc.chunk.js","sourcesContent":["// TrafficLightContext.js\r\nimport React, { createContext, useReducer, useEffect } from 'react';\r\n\r\n// Initial State\r\nconst initialState = {\r\n  currentLight: 'green',\r\n  pedestrianRequested: false,\r\n  emergencyOverride: false,\r\n \r\n  timer: 10,  // Countdown for the current light\r\n};\r\n\r\n// Actions\r\nconst CHANGE_LIGHT = 'CHANGE_LIGHT';\r\nconst REQUEST_CROSSING = 'REQUEST_CROSSING';\r\nconst EMERGENCY_OVERRIDE = 'EMERGENCY_OVERRIDE';\r\nconst RESET_TIMER = 'RESET_TIMER';\r\nconst UPDATE_TIMER = 'UPDATE_TIMER';\r\n\r\n// Reducer\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case CHANGE_LIGHT:\r\n      return {\r\n        ...state,\r\n        currentLight: action.payload,\r\n        timer: action.timer,\r\n      };\r\n    case REQUEST_CROSSING:\r\n      return {\r\n        ...state,\r\n        pedestrianRequested: true,\r\n      };\r\n    case EMERGENCY_OVERRIDE:\r\n      return {\r\n        ...state,\r\n        emergencyOverride: action.emergencyOverride,\r\n        currentLight: action.payload,\r\n        \r\n      };\r\n    case RESET_TIMER:\r\n      return {\r\n        ...state,\r\n        pedestrianRequested: false,\r\n        emergencyOverride: false,\r\n      };\r\n      case UPDATE_TIMER:\r\n      return {\r\n        ...state,\r\n        timer: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// Context\r\nexport const TrafficLightContext = createContext();\r\n\r\nexport const TrafficLightProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  useEffect(() => {\r\n    let timerId;\r\n    if (!state.pedestrianRequested && !state.emergencyOverride) {\r\n      // Normal light sequence\r\n      timerId = setInterval(() => {\r\n        if (state.timer > 1) {\r\n          dispatch({ type: UPDATE_TIMER, payload: state.timer - 1 });\r\n        } else {\r\n          changeLight(dispatch, state.currentLight);\r\n        }\r\n      }, 1000);\r\n    }\r\n    else if (state.pedestrianRequested && !state.emergencyOverride){\r\n      timerId = setInterval(() => {\r\n        if (state.timer > 1) {\r\n\r\n          dispatch({ type: UPDATE_TIMER, payload: state.timer - 1 });\r\n\r\n        } else if (state.timer === 1 && state.currentLight !== \"red\" ) {\r\n         \r\n          dispatch({type: CHANGE_LIGHT, payload: \"red\", timer: 12});\r\n          \r\n        }else if(state.timer === 1 && state.currentLight === \"red\")  {\r\n          \r\n          dispatch({type: RESET_TIMER});\r\n    \r\n        }\r\n        \r\n      }, 1000);\r\n    }\r\n    return () => clearTimeout(timerId);\r\n  }, [state]);\r\n\r\n  return (\r\n    <TrafficLightContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </TrafficLightContext.Provider>\r\n  );\r\n};\r\n\r\n// Helper function to change the light\r\nfunction changeLight(dispatch, currentLight) {\r\n  switch (currentLight) {\r\n    case 'green':\r\n      dispatch({ type: CHANGE_LIGHT, payload: 'yellow', timer: 3 });\r\n      break;\r\n    case 'yellow':\r\n      dispatch({ type: CHANGE_LIGHT, payload: 'red', timer: 7 });\r\n      break;\r\n    case 'red':\r\n      dispatch({ type: CHANGE_LIGHT, payload: 'green', timer: 10 });\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n}\r\n","import React, { useContext} from 'react';\r\nimport { TrafficLightContext } from '../TrafficLightContext';\r\nimport './index.css'; \r\n\r\nconst TrafficLight = () => {\r\n  const { state } = useContext(TrafficLightContext);\r\n  \r\n     \r\n  return (\r\n    \r\n    <div className=\"traffic-light\">\r\n      <div className={`light ${state.currentLight === 'red' ? 'red' : ''}`}></div>\r\n      <div className={`light ${state.currentLight === 'yellow' ? 'yellow' : ''}`}></div>\r\n      <div className={`light ${state.currentLight === 'green' ? 'green' : ''}`}></div>\r\n      <div className=\"countdown\">{state.timer}s</div>\r\n    </div>\r\n     \r\n   \r\n  );\r\n};\r\n\r\nexport default TrafficLight;\r\n","// PedestrianButton.js\r\nimport React, { useContext } from 'react';\r\nimport { TrafficLightContext } from '../TrafficLightContext';\r\nimport \"./index.css\"\r\n\r\nconst PedestrianButton = () => {\r\n  const { dispatch } = useContext(TrafficLightContext);\r\n\r\n  const handleClick = () => {\r\n    dispatch({ type: 'REQUEST_CROSSING' });\r\n  };\r\n\r\n  return (\r\n    <button onClick={handleClick} className=\"pedestrian-button\">\r\n      Pedestrian Crossing\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default PedestrianButton;\r\n","// EmergencyButton.js\r\nimport React, { useContext } from 'react';\r\nimport { TrafficLightContext } from '../TrafficLightContext';\r\nimport \"./index.css\"\r\n\r\nconst EmergencyButton = () => {\r\n  const {state, dispatch } = useContext(TrafficLightContext);\r\n\r\n  const handleEmergency = () => {\r\n    if( state.emergencyOverride){\r\n         dispatch({ type: 'EMERGENCY_OVERRIDE' , payload: \"green\" , emergencyOverride: false });\r\n    }\r\n    else{\r\n      dispatch({ type: 'EMERGENCY_OVERRIDE' , payload: \"green\" , emergencyOverride: true });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <button onClick={handleEmergency} className=\"emergency-button\">\r\n       {state.emergencyOverride ? \"Emergency Override Off\" :  \"Emergency Override On\" }\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default EmergencyButton;\r\n","import \"./App.css\"\nimport React from 'react';\nimport { TrafficLightProvider } from './components/TrafficLightContext';\nimport TrafficLight from './components/TrafficLight';\nimport PedestrianButton from './components/PedestrianButton';\nimport EmergencyButton from './components/EmergencyButton';\n\nfunction App() {\n  return (\n    <TrafficLightProvider>\n      <div className=\"wrapper\">\n        <h1 className = \"traffic-light-title\">Traffic Light Simulator</h1>\n        <TrafficLight />\n        <div className = \"button-container\">\n        <PedestrianButton />\n        <EmergencyButton />\n        </div>\n      </div>\n    </TrafficLightProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}